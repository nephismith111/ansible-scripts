---
# tasks file for elasticsearch

- name: Installation tasks
  block:
    - name: Import Elasticsearch GPG key to keyring
      shell: |
        wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
      args:
        creates: /usr/share/keyrings/elasticsearch-keyring.gpg

    - name: Install apt-transport-https
      apt:
        name: apt-transport-https
        state: present

    - name: Add Elasticsearch repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main"
        state: present
        filename: elastic-8.x

    - name: Install Kibana and supporting packages
      apt:
        name:
          - kibana
          - unzip
        state: present
        update_cache: yes

    - name: Install Elasticsearch package and capture output
      apt:
        name:
          - elasticsearch
        state: present
        update_cache: yes
      register: elastic_install

    - name: Extract elastic password from installation output
      set_fact:
        elastic_password: "{{ elastic_install.stdout_lines | select('regex', 'elastic built-in superuser is :') | first | regex_replace('^.*is : (.*)$', '\\1') }}"
      when: elastic_install.changed

    - name: Display elastic password
      debug:
        msg: "Elastic user password: ⭐ {{ elastic_password }} ⭐"
      when: elastic_install.changed

    - name: Enable Elasticsearch service but ensure stopped state
      systemd:
        name: elasticsearch
        enabled: yes
        state: stopped
  tags:
    - installation

- name: Configuration tasks
  block:
    - name: Ensure Elasticsearch is stopped before configuration
      systemd:
        name: elasticsearch
        state: stopped

    - name: Backup original elasticsearch.yml if not exists
      copy:
        src: /etc/elasticsearch/elasticsearch.yml
        dest: /etc/elasticsearch/elasticsearch.yml.orig
        remote_src: yes
        force: no

    - name: Deploy elasticsearch configuration
      template:
        src: elasticsearch.yml.j2
        dest: /etc/elasticsearch/elasticsearch.yml
        owner: root
        group: elasticsearch
        mode: '0660'
  tags:
    - configure

- name: Certificate preparation tasks
  block:
    - name: Create temporary certificate staging directory
      file:
        path: /tmp/elastic-certs
        state: directory
        mode: '0750'

    - name: Stage source certificate files for conversion
      copy:
        src: "{{ inventory_hostname }}/{{ item.src }}"
        dest: "/tmp/elastic-certs/{{ item.dest }}"
        mode: '0640'
      loop:
        - { src: 'http.pem', dest: 'cert-http.pem' }
        - { src: 'http.key', dest: 'key-http.pem' }
        - { src: 'http-ca.pem', dest: 'ca-http.pem' }
        - { src: 'transport.pem', dest: 'cert-transport.pem' }
        - { src: 'transport.key', dest: 'key-transport.pem' }
        - { src: 'transport-ca.pem', dest: 'ca-transport.pem' }

    - name: Create HTTP PKCS12 keystore
      shell: |
        openssl pkcs12 -export \
          -inkey /tmp/elastic-certs/key-http.pem \
          -in /tmp/elastic-certs/cert-http.pem \
          -out /tmp/elastic-certs/http.p12 \
          -passout pass:{{ elasticsearch_cert_password }} \
          -name "{{ inventory_hostname }}_http"
      args:
        creates: /tmp/elastic-certs/http.p12

    - name: Import HTTP CA into keystore
      shell: |
        /usr/share/elasticsearch/jdk/bin/keytool -importcert \
          -noprompt \
          -keystore /tmp/elastic-certs/http.p12 \
          -storepass {{ elasticsearch_cert_password }} \
          -alias "ca" \
          -file /tmp/elastic-certs/ca-http.pem
      args:
        creates: /tmp/elastic-certs/http.p12.imported

    - name: Create transport PKCS12 keystore
      shell: |
        openssl pkcs12 -export \
          -inkey /tmp/elastic-certs/key-transport.pem \
          -in /tmp/elastic-certs/cert-transport.pem \
          -out /tmp/elastic-certs/transport.p12 \
          -passout pass:{{ elasticsearch_cert_password }} \
          -name "{{ inventory_hostname }}_transport"
      args:
        creates: /tmp/elastic-certs/transport.p12

    - name: Import transport CA into keystore
      shell: |
        /usr/share/elasticsearch/jdk/bin/keytool -importcert \
          -noprompt \
          -keystore /tmp/elastic-certs/transport.p12 \
          -storepass {{ elasticsearch_cert_password }} \
          -alias "ca" \
          -file /tmp/elastic-certs/ca-transport.pem
      args:
        creates: /tmp/elastic-certs/transport.p12.imported

    - name: Ensure certificate directory exists
      file:
        path: /etc/elasticsearch/certs
        state: directory
        mode: '0750'
        owner: root
        group: elasticsearch


  tags:
    - certificates

- name: System CA certificate setup
  block:
    - name: Copy CA certificate for system trust
      copy:
        src: "{{ inventory_hostname }}/transport-ca.pem"
        dest: /usr/local/share/ca-certificates/root-ca.crt
        owner: root
        group: root
        mode: '0644'

    - name: Update system CA certificates
      command: update-ca-certificates
  tags:
    - certificates

- name: Kibana setup tasks
  block:
    - name: Install Kibana package
      apt:
        name: kibana
        state: present
        update_cache: yes

    - name: Create Kibana certificate directory
      file:
        path: /etc/kibana/certs
        state: directory
        owner: root
        group: kibana
        mode: '0750'

    - name: Copy Kibana certificates
      copy:
        src: "{{ inventory_hostname }}/{{ item.src }}"
        dest: "/etc/kibana/certs/{{ item.dest }}"
        owner: root
        group: kibana
        mode: '0640'
      loop:
        - { src: 'kibana.key', dest: 'kibana.key' }
        - { src: 'kibana.pem', dest: 'kibana.pem' }
        - { src: 'kibana-ca.pem', dest: 'kibana-ca.pem' }
        - { src: 'transport-ca.pem', dest: 'elasticsearch-ca.pem' }

    - name: Deploy Kibana configuration
      template:
        src: kibana.yml.j2
        dest: /etc/kibana/kibana.yml
        owner: root
        group: kibana
        mode: '0660'

    - name: Generate Kibana encryption keys
      command: /usr/share/kibana/bin/kibana-encryption-keys generate
      register: encryption_keys
      changed_when: false

    - name: Display Kibana encryption keys
      debug:
        var: encryption_keys.stdout_lines
      when: encryption_keys.stdout is defined

    - name: Enable and start Kibana service
      systemd:
        name: kibana
        enabled: yes
        state: started
  tags:
    - kibana

- name: Kibana certificate rotation tasks
  block:
    - name: Stop Kibana service
      systemd:
        name: kibana
        state: stopped

    - name: Copy new Kibana certificates
      copy:
        src: "{{ inventory_hostname }}/{{ item.src }}"
        dest: "/etc/kibana/certs/{{ item.dest }}"
        owner: root
        group: kibana
        mode: '0640'
      loop:
        - { src: 'kibana.key', dest: 'kibana.key' }
        - { src: 'kibana.pem', dest: 'kibana.pem' }
        - { src: 'kibana-ca.pem', dest: 'kibana-ca.pem' }
        - { src: 'transport-ca.pem', dest: 'elasticsearch-ca.pem' }

    - name: Start Kibana service
      systemd:
        name: kibana
        state: started
  tags:
    - rotate-kibana-certs

- name: Certificate rotation tasks
  block:
    - name: Ensure Elasticsearch is stopped before rotating certificates
      systemd:
        name: elasticsearch
        state: stopped

    - name: Install generated PKCS12 keystores
      copy:
        src: "/tmp/elastic-certs/{{ item }}"
        dest: "/etc/elasticsearch/certs/{{ item }}"
        remote_src: yes
        owner: root
        group: elasticsearch
        mode: '0640'
      loop:
        - http.p12
        - transport.p12

#    - name: Clean up staging directory
#      file:
#        path: /tmp/elastic-certs
#        state: absent

    - name: Update HTTP keystore path
      lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        regexp: '^xpack.security.http.ssl.keystore.path:'
        line: 'xpack.security.http.ssl.keystore.path: /etc/elasticsearch/certs/http.p12'

    - name: Update transport keystore path
      lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        regexp: '^xpack.security.transport.ssl.keystore.path:'
        line: 'xpack.security.transport.ssl.keystore.path: /etc/elasticsearch/certs/transport.p12'

    - name: Update transport truststore path
      lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        regexp: '^xpack.security.transport.ssl.truststore.path:'
        line: 'xpack.security.transport.ssl.truststore.path: /etc/elasticsearch/certs/transport.p12'

    - name: Remove old keystore passwords
      command: /usr/share/elasticsearch/bin/elasticsearch-keystore remove {{ item }}
      loop:
        - xpack.security.transport.ssl.keystore.secure_password
        - xpack.security.transport.ssl.truststore.secure_password
        - xpack.security.http.ssl.keystore.secure_password
      ignore_errors: yes  # In case passwords don't exist yet

    - name: Add new keystore passwords
      expect:
        command: /usr/share/elasticsearch/bin/elasticsearch-keystore add {{ item }}
        responses:
          'Enter value for.*': "{{ elasticsearch_cert_password }}"
      loop:
        - xpack.security.transport.ssl.keystore.secure_password
        - xpack.security.transport.ssl.truststore.secure_password
        - xpack.security.http.ssl.keystore.secure_password
      no_log: true  # Don't log password in ansible output

  tags:
    - rotate-certs


#TASK [elasticsearch : Create HTTP PKCS12 keystore] ***************************************************************************************************
#ok: [ns-elastic-01]
#
#TASK [elasticsearch : Import HTTP CA into keystore] **************************************************************************************************
#fatal: [ns-elastic-01]: FAILED! => {"changed": true, "cmd": "/usr/share/elasticsearch/jdk/bin/keytool -importcert  -noprompt  -keystore /tmp/elastic-certs/http.p12  -storepass changeme  -alias \"ca\"  -file /tmp/elastic-certs/ca-http.pem\n", "delta": "0:00:00.225613", "end": "2025-01-30 03:51:15.628265", "msg": "non-zero return code", "rc": 1, "start": "2025-01-30 03:51:15.402652", "stderr": "", "stderr_lines": [], "stdout": "keytool error: java.lang.Exception: Certificate not imported, alias <ca> already exists", "stdout_lines": ["keytool error: java.lang.Exception: Certificate not imported, alias <ca> already exists"]}
#
#PLAY RECAP *******************************************************************************************************************************************
#ns-elastic-01              : ok=13   changed=2    unreachable=0    failed=1    skipped=2    rescued=0    ignored=0
#
#nsmith@ajftracerv:~/Nephi/repos/ansible-scripts$
